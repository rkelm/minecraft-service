#!/bin/bash
### BEGIN INIT INFO
# Provides:          minecraft
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Minecraft server
# Description:       Service for starting, stopping and checking
#                    the status of a Minecraft server.
### END INIT INFO
#/etc/init.d/minecraft
# Bash 4.2+

# Debug
#set -o verbose

# Name of script
name=$(basename $0)

# Remove startup/shutdown prefix used by /etc/rc*.d, if present.
# Prefix is Snn for startup or Knn for shutdown, where n is a digit.
prefix_regex="^(S|K)\d{2}"
if test `echo ${name} | grep -Pc ${prefix_regex}` -ne 0; then
  name=`echo ${name} | grep -Po "(?<=${prefix_regex}).+"`
fi

# Read configuration variable file if it is present
if [ -r /etc/default/$name ]; then
  source /etc/default/$name
else
  # Default values
  user="minecraft"
  server="/home/$user/minecraft"
  resources="/home/$user/minecraft-resources"
  jar="minecraft_server.jar"
  version="release"
  eula="false"
  mem_init="1024M"
  mem_max="1024M"
  java="$(which java)"
  invocation="-Xms$mem_init -Xmx$mem_max -jar $jar nogui"
  desc="Minecraft server"
  fifo="$server/console.input"
  log="$server/console.output"
fi

# Variables
resource_versions="$resources/versions"
log_start_regex="minecraft server version (.*)"
server_properties_file="$server/server.properties"
server_properties_regex="^([a-z-]*)=(.*)"
versions_json=http://s3.amazonaws.com/Minecraft.Download/versions/versions.json

# Define LSB log_* functions.
. /lib/lsb/init-functions

# Compatibility to older LSB Standard.
log_daemon_msg () {
  log_success_msg "$1"
}

log_end_msg () {
  if [ "$1" = "0" ] ; then
    log_success_msg "success"
  else
    log_failure_msg "failure"
  fi
}

# Check user
if [ ! "$(id -u $user)" ]; then
  log_end_msg 1
  exit 1
fi

# Run as specified user
as_user() {
  if [ $(whoami) = $user ]; then
    bash -c "$1"
  else
    sudo -u $user /bin/bash -c "$1" || exit 1
  fi
}

# Check if array contains value matching provided regex
array_contains() {
  local array e value
  value="$1"
  declare -a array=("${!2}")
  for e in "${array[@]}"; do
    [[ "$value" =~ $e ]] && return 0
  done
  return 1
}

# Version timestamp
version_timestamp() {
  # Usage
  #   version_timestamp "x.x.x"
  #   Gives back a printf of version timestamp for comparison, eg:
  #   [ $(version_timestamp "1.2.5") -lt $(version_timestamp "1.8") ]
  
  local version id_regex releasetime releasetime_regex v
  
  version="$1"
  id_regex="\"id\": \"($version)\""
  release_regex="\"releaseTime\": \"(.*)\""
  
  as_user "mkdir -p $resources"
  as_user "wget -qN -P $resources $versions_json"
  
  v="false"
  while read line; do
    if [[ $line =~ $id_regex ]]; then
      v="true"
    fi
    if [[ $v = "true" ]]; then
      [[ $line =~ $release_regex ]]
      [[ ! -z ${BASH_REMATCH[1]} ]] && v="false" && releasetime="${BASH_REMATCH[1]}" && break
    fi
  done <"$resources/versions.json"
  
  printf "%s" $(date -d "$releasetime" +%s)
  
  return 0
}

service_config() {
  # Usage
  #   service_config <setting> <value>
  # Return
  #   0 if command was sent successfully
  #   1 if command was unknown or failed
  
  local setting=$1 value=$2 updated
  
  if [[ ! $setting ]] ; then
    echo \<setting\> parameter is required.
    return 1
  fi
  # TODO: Add check, eg. if "#" or something fishy
  
  updated="${setting}=\"${value}\""
  
  sudo sed -i --follow-symlinks 's#^'"$setting"'.*#'"$updated"'#' /etc/default/$name
  return 0
}

server_command() {
  # Usage
  #   server_command "<command>"
  # Return
  #   0 if command was sent successfully
  #   1 if command was unknown or failed
  #   2 if command response is unknown
  #
  # For more accurate return value it's recommended to send only one command per second since thats the limit of the log timestamp.
  
  local force failed message timestamp i
  
  # Possible responses for specified commands (when completed).
  # If this is filled, it gives a more certain return from function.
  # Otherwise it just returns the latest message from server (which
  # can be something else than a response to a specific command).
  case "$1" in
    "defaultgamemode "*)
      message=(
        "^The world's default game mode is now (.*)"
      )
    ;;
    "difficulty "*)
      message=(
        "^Set game difficulty to (.*)"
      )
    ;;
    "setidletimeout "*)
      message=(
        "^Successfully set the idle timeout to (.*) minutes."
      )
    ;;
    "whitelist off")
      message=(
        "^CONSOLE: Turned off white-listing"
        "^Turned off the whitelist"
      )
    ;;
    "whitelist on")
      message=(
        "^CONSOLE: Turned on white-listing"
        "^Turned on the whitelist"
      )
    ;;
    "whitelist reload")
      message=(
        "^CONSOLE: Reloaded white-list from file"
        "^Reloaded the whitelist"
      )
    ;;
  esac
  
  failed=(
    "^'(.*)' is not a valid number"
    "^The number you have entered \((.*)\) is too small, it must be at least (.*)"
  )
  
  unknown=(
    "^Unknown console command. Type \"help\" for help."
    "^Unknown command. Try /help for a list of commands" # 1.3.1 (1.3) and later
  )

  timestamp=$(date +%s)
  log_modified=$(stat -c %Y $log)
  
  timestamp_date=$(date +%F)
  log_modified_date=$(date -d @$log_modified +%F)
  
  # If logfile is from yesterday or older, start a new logfile so old entries aren't considered as current.
  # This is due to the absense of dates in Minecraft log files
  if [ ! $timestamp_date = $log_modified_date ]; then
    if server_version; then
      echo "[$(date +%T)] [Init script/INFO]: Current minecraft server version $version_current" > $log
    else
      echo "[$(date +%T)] [Init script/INFO]: Unknown server version" > $log
    fi
    
    echo "[$(date +%T)] [Init script/INFO]: Regenerated $log at $timestamp" >> $log
    echo "[$(date +%T)] [Init script/INFO]: For earlier logentries, see $server/logs" >> $log
    
    as_user "printf \"%s\n\"  \"list\" > $fifo"
    
    sleep 1
    
    timestamp=$(date +%s)
    
    as_user "printf \"%s\n\"  \"$1\" > $fifo"
    
    #sed -i 's/\x0//g' $log
  else
    as_user "printf \"%s\n\"  \"$1\" > $fifo"
  fi

# Added timeout to tail for capturing multiple line output.
  sleep $cmd_wait &
  timerPid=$!

  if server_version; then
    while read log_line; do
  
      server_log "$log_line"

#      TODO: Debug line to be deleted in the future      
#      echo "Logline: $log_line_timestamp, Timestamp: $timestamp"
      
      # If log timestamp is less than command timestamp, skip iteration
      [[ $log_line_timestamp -lt $timestamp ]] && continue
      
      if array_contains "$log_line_message" message[@]; then
        printf "   %s\n" "$log_line_message"
	kill $timerPid
#        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 0
      elif array_contains "$log_line_message" failed[@]; then
        printf "   %s\n" "$log_line_message"
	kill $timerPid
#        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 1
      elif array_contains "$log_line_message" unknown[@]; then
        printf "   %s\n" "Unknown console command"
	kill $timerPid
#        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 1
      elif [[ ${#message[@]} -eq 0 ]]; then
	# No specific messages expected, prepare to capture multiline output.
        printf "   %s\n" "$log_line_message"
#        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        retval=2
      else
        ((i++))
        # Specific messages where expected, but not seen in output.
	# Return 2 if response was not found in 4 lines
	if (( i > 3 )); then
   	  kill $timerPid
#            kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
            return 2
	fi
      fi
    done < <( tail --pid=$timerPid -f $log )
    return $retval

  else
    printf "   %s\n" "Sent command: $1"
    return 2
  fi
}

server_is_running() {
  # Return
  #   0 if server is running
  #   1 if server is not running
  
  if [ -z "$(ps aux | grep -v grep | grep "$java.*nuid=$name-nuid")" ]; then
    return 1
  else
    if [ -z "$(ps aux | grep -v grep | grep "$java.*nuid=$name-nuid" | grep -v "bash")" ]; then
      return 1
    else
      return 0
    fi
  fi
}

server_download() {
  # Usage
  #   server_download <version>
  # Return
  #   0 if download succeeded
  #   1 if download failed
  
  local version_download server_url
  
  version_download="$1"
  
  server_url="https://s3.amazonaws.com/Minecraft.Download/versions/$version_download/minecraft_server.$version_download.jar"
  
  as_user "mkdir -p $resource_versions"
  
  if [ $(whoami) = $user ]; then
    printf "   %s" "Downloading..."
    wget --progress=dot -N -P $resource_versions $server_url 2>&1 | \
    grep -oP --line-buffered "(\d{1,3})%" | \
    while read line; do
      printf "\r   %s %s" "Downloading..." "$line"
    done; test ${PIPESTATUS[0]} -eq 0 && printf "\r   %s %s\n" "Downloading..." "100%" || printf "\r   %s %s\n" "Downloading..." "failed"
  else
    sudo -u $user /bin/bash -c "wget -N -P $resource_versions $server_url"
    sudo -u $user /bin/bash -c "chown $user:$user $resource_versions/minecraft_server.$version_download.jar"
  fi
  
  case "$?" in
    1) return 1 ;;
  esac
  
  return 0
  
}

server_eula() {
  # Return
  #   0 if eula.txt was written
  #   1 if eula.txt was not written
  as_user "printf \"eula=true\" > \"$server/eula.txt\"" &> /dev/null || return 1
  return 0
}

server_log() {
  # Usage
  #   server_log <log line>
  # Return
  #   0 if trying to parse logfile
  #   1 if not trying to parse logfile
  local log_line_input log_line_regex
  
  log_line_input=$1
  
  if server_version; then
    case $version_current in
      "rd-132211"|"rd-132328"|"rd-160052"|"rd-161348"|"c0.0.11a"|"c0.0.13a"|"c0.0.13a_03"|"c0.30_01c"|"inf-20100618"|"a1.0.4"|"a1.0.5_01"|"a1.0.11"|"a1.0.14"|"a1.0.15"|"a1.0.16"|"a1.0.17_02"|"a1.0.17_04"|"a1.1.0"|"a1.1.2"|"a1.1.2_01"|"a1.2.0"|"a1.2.0_01"|"a1.2.0_02"|"a1.2.1"|"a1.2.1_01"|"a1.2.2a"|"a1.2.2b"|"a1.2.3"|"a1.2.3_01"|"a1.2.3_02"|"a1.2.3_04"|"a1.2.4_01"|"a1.2.5"|"a1.2.6"|"b1.0"|"b1.0_01"|"b1.0.2"|"b1.1_01"|"b1.1_02"|"b1.2"|"b1.2_01"|"b1.2_02"|"b1.3b"|"b1.3_01"|"b1.4"|"b1.4_01"|"b1.5"|"b1.5_01"|"b1.6"|"b1.6.1"|"b1.6.2"|"b1.6.3"|"b1.6.4"|"b1.6.5"|"b1.6.6"|"b1.7"|"b1.7.2"|"b1.7.3"|"b1.8"|"b1.8.1"|"1.0"|"1.1"|"1.2.1"|"1.2.2"|"1.2.3"|"1.2.4"|"1.2.5"|"1.3"|"1.3.1"|"1.3.2"|"1.4"|"1.4.1"|"1.4.2"|"1.4.3"|"1.4.4"|"1.4.5"|"1.4.6"|"1.4.7"|"1.5"|"1.5.1"|"1.5.2"|"1.6"|"1.6.1"|"1.6.2"|"1.6.4")
        log_line_regex="(....-..-..) (..:..:..) \[(.{0,4})\] (.*)"
        [[ $log_line_input =~ $log_line_regex ]]
        log_line_date="${BASH_REMATCH[1]}"
        log_line_time="${BASH_REMATCH[2]}"
#        log_line_thread=""
        log_line_type="${BASH_REMATCH[3]}"
        log_line_message="${BASH_REMATCH[4]}"
        
        log_line_timestamp=$(date -d "$log_line_date $log_line_time" +%s)
      ;;
      "1.7"|*)
        log_line_regex="\[(..:..:..)\] \[(.*)/(.{0,4})\]: (.*)"
        [[ $log_line_input =~ $log_line_regex ]]
        log_line_date=""
        log_line_time="${BASH_REMATCH[1]}"
#        log_line_thread="${BASH_REMATCH[2]}"
        log_line_type="${BASH_REMATCH[3]}"
        log_line_message="${BASH_REMATCH[4]}"
        
        # Create log timestamp from log time in hh:mm:ss + todays date
        log_line_timestamp=$(date -d "$(date +%F) $log_line_time" +%s)
      ;;
    esac
    return 0
  else
    return 1
  fi
  
}

server_properties() {
  # Return
  #   0 if properties were stored in associative array server_setting
  #   1 if properties were not stored in associative array server_setting
  local setting value
  declare -Ag server_setting
  
  # Parse server.properties
  while read properties_line; do
    
    [[ $properties_line =~ $server_properties_regex ]] || continue
    
    setting="${BASH_REMATCH[1]}"
    value="${BASH_REMATCH[2]}"
    
    server_setting["$setting"]="$value"

  done <$server_properties_file || return 1
  
  return 0
}

server_properties_update() {
  # Usage
  #   server_properties_update <setting> <value>
  # Return
  #   0 if command was sent successfully
  #   1 if specified setting does not exist

  local setting=$1 value=$2 updated
  
  # TODO: Add check, eg. if "#" or something fishy
  
  updated="${setting}=${value}"
  
  server_properties
  if [[ ! ${server_setting[$setting]} ]]; then
    printf "   %s\n" "Error: The setting $setting does not exist in $server_properties_file";
    return 1
  fi
  
  sed -i 's#^'"$setting"'.*#'"$updated"'#' $server_properties_file
  return 0
}

server_reload() {
  # Return
  #   0 if server has been reloaded
  #   1 if server could not be reloaded
  local whitelist
  
  server_properties
  
  if [[ "${server_setting[white-list]}" = "false" ]]; then
    whitelist="off"
  elif [[ "${server_setting[white-list]}" = "true" ]]; then
    whitelist="on"
  else
    log_daemon_msg "Reading white-list setting in $server/server.properties"
    return 1
  fi
  
  if server_version; then
    
    if server_version_minimum "12w32a"; then
      server_command "difficulty ${server_setting[difficulty]}"
      sleep 1
    fi
    
    if server_version_minimum "12w22a"; then
      server_command "defaultgamemode ${server_setting[gamemode]}"
      sleep 1
    fi
    
    if server_version_minimum "13w38a"; then
      server_command "setidletimeout ${server_setting[player-idle-timeout]}"
      sleep 1
    fi
    
    server_command "whitelist $whitelist"
    sleep 1
    server_command "whitelist reload"
    sleep 1
    
  fi
  
  return 0
}

server_start() {
  # Return
  #   0 if server has been started
  #   1 if server could not be started
  local timestamp
  
  timestamp=$(date '+%s')
  
  [ -d "$server" ] || as_user "mkdir -p $server"
  [ -f "$server/$jar" ] || exit 1
  cd $server || exit 1
  
  # Recreate fifo
  [ -e "$fifo" ] && as_user "rm $fifo"
  as_user "mkfifo $fifo"
  
  if [[ $eula = "true" ]]; then
    server_eula
  fi
  
  # Start server
  as_user "tail -n +1 -f --pid=\$$ $fifo | { $java $invocation nuid=$name-nuid &> $log; kill \$$; }" &> /dev/null &
  
  # Wait until current log exists
  printf "   %s\n" "Initializing..."
  until [ -r $log ] && [ $(date +%s -r $log ) -gt $timestamp ]; do
    sleep 1
  done
  
  # Read log until started
  tail -f $log | while read log_line; do
    
    server_log "$log_line"
    
    case $log_line in
      *"Done ("*")! For help, type \"help\" or \"?\"")
        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 0
      ;;
      *"Starting minecraft server"*)
        if server_version "update"; then
          printf "   %s\n" "Server version: $version_current"
        fi
      ;;
      *"To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"")
        printf "   %s\n" "To start the server with more ram, edit /etc/default/$name"
      ;;
      *"You need to agree to the EULA in order to run the server. Go to eula.txt for more info.")
        printf "   %s\n" "$log_line_message"
        printf "   %s\n" "Shutting down server"
        as_user "printf \"%s\n\" \"stop\" > $fifo"
        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 1
      ;;
      *"**** FAILED TO BIND TO PORT!")
        printf "   %s\n" "$log_line_message"
        printf "   %s\n" "Shutting down server"
        as_user "printf \"%s\n\" \"stop\" > $fifo"
        kill $(ps -o pid,cmd --no-headers --ppid $$ | grep tail | awk '{print $1}')
        return 1
      ;;
      *)
        [ -z "$log_line_message" ] || printf "   %s\n" "$log_line_message"
      ;;
    esac
    
  done
}

server_stop() {
  # Return
  #   0 if server has been stopped
  #   1 if server could not be stopped
  
  server_command "save-all"
  sleep 1
  server_command "stop"
  
  # Sleep until server is stopped
  while kill -0 "$(ps aux | grep -v grep | grep "$java.*nuid=$name-nuid" | grep -v "bash" | awk '{print $2}')" &> /dev/null; do
    sleep 1
  done
  
  return 0
}

server_update() {
  # Usage
  #   server_update <version>
  # Return
  #   0 if server has been updated
  #   1 if server has not been updated
  
  local version_update
  
  version_update="$1"
  
  # TODO: read as user
  if [[ -r "$resource_versions/minecraft_server.$version_update.jar" ]]; then
    as_user "rm $server/$jar && ln $resource_versions/minecraft_server.$version_update.jar $server/$jar"
    return 0
  else
    return 1
  fi

}

server_update_check() {
  # Return
  #   0 if there is a version available for download
  #   1 if theres no difference between online and local version numbers
  #   2 if an error occured (prints error message)
  
  local latest_regex line
  
  if [ "$version" = "release" -o "$version" = "snapshot" ]; then

    latest_regex="\"($version)\": \"(.*)\""
  
    as_user "mkdir -p $resources" || return 2
    # TODO: wget error message
    as_user "wget -qN -P $resources $versions_json" || return 2
    
    while read line; do
      if [[ $line =~ $latest_regex ]]; then
        version_online="${BASH_REMATCH[2]}"
        break
      fi
    done <"$resources/versions.json"
    
    if [ -z "$version_online" ]; then
      log_failure_msg "Could not determine latest $version version."
      return 2
    fi
    
    if server_version; then
      if [ "$version_current" = "$version_online" ]; then
        return 1
      else
        return 0
      fi
    else
      log_failure_msg "Could not determine local server version from log."
      return 2
    fi

  elif online_version_exists "$version"; then
    
    if server_version; then
      if [ "$version_current" = "$version" ]; then
        return 1
      else
        if online_version_downloadable "$version"; then
          version_online="$version"
          return 0
        else
          log_failure_msg "Specified version ($version) is not available for download."
          return 2
        fi
      fi
    else
      log_failure_msg "Could not determine local server version from log."
      return 2
    fi
    
  else
    log_failure_msg "Invalid version value in configuration file: $version"
    return 2
  fi

}

server_version() {
  # Return
  #   0 if version value is stored in $version_current
  #   1 if server $version_current could not be determined
  
  local opt=$1 line
  
  if [[ ! $opt = "update" ]]; then
    [[ ! -z "$version_current" ]] && return 0
  fi
  
  [[ -r $log ]] || return 1
  
  while read line; do
    [[ $line =~ $log_start_regex ]]
    [[ ! -z ${BASH_REMATCH[1]} ]] && version_current="${BASH_REMATCH[1]}" && break
  done <$log || return 1
  
  return 0
}

server_version_minimum() {
  # Usage
  #   server_version_minimum <x.x.x>
  # Return
  #   0 if $version_current is more than or equal to compared version x.x.x
  #   1 if comparison failed
  
  if server_version; then
    if [ "$(version_timestamp \"$version_current\")" -ge "$(version_timestamp \"$1\")" ]; then
      return 0
    else
      return 1
    fi
  else
    return 1
  fi
}

online_version_downloadable() {
  # Usage
  #   online_version_downloadable <x.x.x>
  # Description
  #   Checks if provided version is downloadable from server
  # Return
  #   0 if server version x.x.x is downloadable
  #   1 if server version x.x.x is not downloadable or check failed
  local download_url statuscode version="$1"
  
  download_url="https://s3.amazonaws.com/Minecraft.Download/versions/$version/minecraft_server.$version.jar"
  
  statuscode=$(wget --spider -S "$download_url" 2>&1 | grep "HTTP/" | awk '{print $2}')
  
  if [ "$statuscode" = "200" ]; then
    return 0
  else
    return 1
  fi
}

online_version_exists() {
  # Usage
  #   online_version_exists <x.x.x>
  # Return
  #   0 if server version x.x.x exists
  #   1 if server version x.x.x does not exists
  #   2 if there was an error saving or downloading versions.json
  
  local id_regex line version="$1" version_exists
  
  as_user "mkdir -p $resources" || return 2
  as_user "wget -qN -P $resources $versions_json" || return 2
  
  id_regex="\"id\": \"($version)\""
  
  while read line; do
    if [[ $line =~ $id_regex ]]; then
      version_exists="${BASH_REMATCH[1]}"
      break
    fi
  done <"$resources/versions.json"
  
  if [ ! -z $version_exists ]; then
    return 0
  else
    return 1
  fi

}

backup_map() {
  # Usage
  #   backup_map
  # Return
  #   0 if backup succeeds
  #   1 if backup fails 
  if [ ! "$world_backup" ]; then
    log_daemon_msg "World backup directory not defined in config."
    return 1
  fi
  if [ $1 ] ; then
    local comment="_$1"
  fi
  server_properties
  local world_name=${server_setting[level-name]}
  echo "   Creating map backup of ${world_name} in backup directory ${world_backup}."
  tar czf "${world_backup}${world_name}_$(date "+%Y-%m-%d_%H-%M-%S")${comment}.tgz" -C "$server/${world_name}" .
  case $? in
    0) return 0 ;;
    *)return 1 ;;
  esac
}

case "$1" in
  start)
    server_is_running
    case "$?" in
      0) log_daemon_msg "$desc is already running" ;;
      1)
        log_daemon_msg "Starting $desc"
        server_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
    esac
  ;;
  stop)
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "Stopping $desc"
        server_stop
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
      1) log_daemon_msg "$desc is not running" ;;
    esac
  ;;
  status)
    server_is_running
    case "$?" in
      0) log_daemon_msg "$desc is running"; exit 0 ;;
      1) log_daemon_msg "$desc is not running"; exit 3 ;;
    esac
  ;;
  reload)
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "Reloading $desc"
        server_reload
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
      1) log_daemon_msg "$desc is not running" ;;
    esac
  ;;
  restart|force-reload)
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "Restarting $desc"
        server_stop
        case "$?" in
          0)
            log_daemon_msg "$desc stopped, starting again"
            server_start
            case "$?" in
              0) log_end_msg 0 ;;
              1) log_end_msg 1; exit 1 ;;
            esac
          ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
      1)
        log_daemon_msg "Starting $desc"
        server_start
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
    esac
  ;;
# Special commands
  command)
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "Sending command to $desc"
        server_command "${*:2}"
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
          2) exit 0 ;;
        esac
      ;;
      1) log_daemon_msg "$desc is not running" ;;
    esac
  ;;
  config)
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "$desc is running, restart server for changes to take effect."
        service_config "$2" "$3"
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
      1)
        log_daemon_msg "Updating $desc init script configuration."
        service_config "$2" "$3"
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
    esac
  ;;
  properties)
    if [ ! $2 ]; then
      log_daemon_msg "No setting specified. Usage: service minecraft properties <setting> [new value]"
      exit 0
    elif [ ! $3 ]; then
      server_properties
      log_daemon_msg "Currect setting for $2:"
      if [[ ! ${server_setting[$2]} ]]; then
        log_end_msg 1
        exit 1
      fi
      printf "   %s\n" $2=${server_setting[$2]}
      exit 0
    fi
    server_is_running
    case "$?" in
      0)
        log_daemon_msg "Updating $desc properties."
        server_properties_update "$2" "$3"
        case "$?" in
          0) printf "   %s\n" "Note: $desc is running, restart server for changes to take effect."; log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
      1)
        log_daemon_msg "Updating $desc properties."
        server_properties_update "$2" "$3"
        case "$?" in
          0) log_end_msg 0 ;;
          1) log_end_msg 1; exit 1 ;;
        esac
      ;;
    esac
  ;;
  check-update)
    server_update_check
    case "$?" in
      0)
        if [ $version = "release" -o $version = "snapshot" ]; then
          log_daemon_msg "New $version available: $version_online"
        else
          log_daemon_msg "Specified version ($version) is available for download."
        fi
      ;;
      1)
        if [ $version = "release" -o $version = "snapshot" ]; then
          log_daemon_msg "$desc is running latest $version ($version_current)"
        else
          log_daemon_msg "$desc is running specified version in configuration ($version_current)"
        fi
      ;;
      2) log_end_msg 1; exit 1 ;;
    esac
  ;;
  update)
    log_daemon_msg "Checking for version tagged \"$version\""
    server_update_check
    case "$?" in
      0)
        server_is_running
        case "$?" in
          0)  # Update procedure when server is running
            # 1 Download
            log_daemon_msg "Downloading minecraft_server.$version_online.jar"
            server_download "$version_online"
            case "$?" in
              1) log_end_msg 1; exit 1 ;;
            esac
            
            # 2 Stop
            log_daemon_msg "Stopping $desc"
            server_stop
            case "$?" in
              1) log_end_msg 1; exit 1 ;;
            esac
            
            # 3 Update
            log_daemon_msg "Installing version $version_online"
            server_update "$version_online"
            case "$?" in
              1) log_end_msg 1; exit 1 ;;
            esac
            
            # 4 Start
            log_daemon_msg "Starting $desc"
            server_start
            case "$?" in
              0)
                log_daemon_msg "Successfully installed version $version_online"
                log_end_msg 0
              ;;
              1) log_end_msg 1; exit 1 ;;
            esac
          ;;
          1)  # Update procedure when server is not running
            # 1 Download
            log_daemon_msg "Downloading minecraft_server.$version_online.jar"
            server_download "$version_online"
            case "$?" in
              1) log_end_msg 1; exit 1 ;;
            esac
            
            # 2 Update
            log_daemon_msg "Installing version $version_online"
            server_update "$version_online"
            case "$?" in
              0)
                as_user "printf \"%s\n\" \"Starting minecraft server version $version_online\" > $log"
                log_daemon_msg "Successfully installed version $version_online"
                log_end_msg 0
              ;;
              1) log_end_msg 1; exit 1 ;;
            esac
          ;;
        esac
      ;;
      1)
        if [ $version = "release" -o $version = "snapshot" ]; then
          log_daemon_msg "$desc is running latest $version ($version_current)"
        else
          log_daemon_msg "$desc is running specified version defined in configuration ($version_current)"
        fi
      ;;
      2) log_end_msg 1; exit 1 ;;
    esac
  ;;
  version)
    server_is_running
    case "$?" in
      0)
        if server_version; then
          log_daemon_msg "$desc is running version: $version_current"
        else
          log_daemon_msg "Could not find version of $desc"
        fi
      ;;
      1)
        if server_version; then
          log_daemon_msg "$desc has version $version_current installed."
        else
          log_daemon_msg "$desc is not running"
        fi
      ;;
    esac
  ;;
  showlog)
    if [ ! $2 ]; then
      log_daemon_msg "No line count specified. Usage: service minecraft showlog <line count>"
      exit 0
    fi
    tail -n $2 $log
  ;;
  backupmap)
    server_is_running
    case "$?" in
      0)
	server_command save-all
	server_command save-off
        backup_map "$2"
	server_command save-on
      ;;
      1)
        backup-map
      ;;
    esac
  ;;

# Catch all
  help|*)
    printf "%s\n" "Usage: service $name {start|stop|status|restart|reload|command|config|properties|check-update|update|version|showlog|backupmap|help}" >&2
    exit 3
  ;;
esac
exit 0
